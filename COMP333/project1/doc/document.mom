.TITLE "Parallel Execution in OpenMP and Java 8 Streams"
.AUTHOR "Natan Deusdedit Vargas"
.PAPER LETTER
.PRINTSTYLE TYPESET
\" --------------------------------------------------
.HEADER_LEFT "Vargas, Natan"
.HEADER_CENTER ""
.sy echo .HEADER_RIGHT \\"$(date)\\" > date.current
.so date.current
.sy rm date.current
\" --------------------------------------------------
.NEWCOLOR base   RGB #657b83
.NEWCOLOR pragma RGB #002b36
.NEWCOLOR ctrl   RGB #859900
.NEWCOLOR var    RGB #268bd2
.NEWCOLOR lit    RGB #2aa198
.NEWCOLOR type   RGB #b58900
\" --------------------------------------------------
.PT_SIZE 12.5
.FAM LM
.FT R
\" --------------------------------------------------
.DOCHEADER OFF 1.i
.de MAKETITLE
\fB\s+[3.5]\*[$TITLE]\s0\fP
.RLD 1P
.DRH
.SHIM
.RLD 1.4P
\s-4by \*[$AUTHOR]\s0
.ALD 1P
.SHIM
..
\" --------------------------------------------------
.HEADING_STYLE 1 FAMILY LM FONT SC SIZE +2 BASELINE_ADJUST 6p
.HEADING_STYLE 2 FAMILY LM FONT SC SIZE +0 BASELINE_ADJUST 6p \
    UNDERSCORE 0.5 0.2
.de H1
.HEADING 1 "\\$1\h'.2i'\*[ST1]"
.RLD 1.8P
.ST 1 J
.TAB 1
\*[RULE]
.TQ
..
\" --------------------------------------------------
.PARA_INDENT 0i
.PARA_SPACE
\" --------------------------------------------------
.START
.MAKETITLE
.H1 Introduction
.PP
Modern computers can utilize multi-threading to improve performance. This is done by partitioning
tasks between multiple threads, which can run concurrently. For certain tasks utilizing multiple
cores can improve performance. However, since threads may share memory access, they could operate
out of order resulting in an strange behavior. I will discuss my technique for using OpenMP and
Java 8 streams to parallelize Gaussian elimination and bilinear interpolation and how I avoid
collisions between threads.
.H1 "Bilinear Interpolation"
Bilinear interpolation is an extension of linear interpolation, which is used to approximate
intermediate values of linear functions. Bilinear interpolation is used to interpolate values
between two axes.
.EQ
delim $$
.EN
.PS 1.8 1.8 LABEL "\fRinterpolating point \fIa\fR"
x1=-1; y1=1; x2=1; y2=-1; xa=2/6; ya=-2/6
copy thru % circle fill $3 rad 1/24 at ($1,$2); $4 at last circle.ne +(1/12,1/12) % until "END"
x1 y1 1 "${x}sub{1},{y}sub{1}$"
x2 y1 1 "${x}sub{2},{y}sub{1}$"
xa ya 0.5 "a"
x1 y2 1 "${x}sub{1},{y}sub{2}$"
x2 y2 1 "${x}sub{2},{y}sub{2}$"
END
copy thru % arrow dashed from ($1, $2) to ($3, $4) % until "END"
x1 y1 xa y1
x2 y1 xa y1
xa 1 xa ya+1/24
x1 y2 xa y2
x2 y2 xa y2
xa -1 xa ya-1/24
END
.PE
.EQ
delim off
.EN
A common application of Bilinear interpolation is scaling images. This method of scaling
interpolates the color value of the new intermediate pixels when the image is resized.
.FLOAT FORCE
.PDF_IMAGE ./res/IMPORTANT.pdf 944p 366p SCALE 24.5 LABEL "\fP\s-2Image scaled 130% using bilinear interpolation\s0"
.HEADING 2 "Using OpenMP"
OpenMP was unable to locate the loop parameters properly, therefore I rewrote it as
a nested loop, which iterates the same as it did before. Since the src array is
read-only, and each iteration writes to a different index in the dst image, there are no
data dependencies.
.FLOAT FORCE
\FC
\*[base]
    \*[base]...
    \*[ctrl]\fBfor\fP\*[base](\*[var]x\*[base]=\*[lit]0\*[base], \*[var]y\*[base]=\*[lit]0\*[base]; \*[var]y\*[base] < \*[var]newHeight\*[base]; \*[var]x\*[base]++) {
        \*[ctrl]\fBif\fP\*[base](\*[var]x\*[base] > \*[var]newWidth\*[base]) {
            \*[var]x\*[base] = \*[lit]0\*[base]; \*[var]y\*[base]++;
        }
        ...\*[black]
\F(LM
.CENTER
\fROriginal Loop
.FLOAT OFF
.FLOAT FORCE
\FC
    \*[base]...
    \*[pragma]#pragma omp parallel for private(x, y)
    \*[ctrl]\fBfor\fP\*[base](\*[var]x\*[base]=\*[lit]0\*[base]; \*[var]x\*[base] < \*[var]newWidth\*[base]; \*[var]x\*[base]++) {
        \*[ctrl]\fBfor\fP\*[base](\*[var]y\*[base]=\*[lit]0\*[base]; \*[var]y\*[base] < \*[var]newHeight\*[base]; \*[var]y\*[base]++) {
        ...\*[black]
\F(LM
.CENTER
\fRParallelized Loop
.FLOAT OFF
.ALD 1P
.PP
It is worth considering using different scheduling to further increase performance.
The \FCschedule\F(LM argument is used to specify the technique OpenMP will use to partition
and assign chunks. \FCschedule\F(LM takes two parameters. The first is the scheduling type,
they are: \FCruntime\F(LM, \FCauto\F(LM, \FCstatic\F(LM, \FCdynamic\F(LM, and \FCguided\F(LM.
The second parameter is the chunk-size. Chunks are a continuous range of iterations for a
thread to do work on.
.PP
The default, \FCstatic\F(LM, assigns chunks amongst the available threads equally at
startup. You can optionally define the chunk size, and they will be assigned to each
thread in a round-robin pattern. i.e. \FCschedule(static, 2)\F(LM utilizing 4 threads over
16 iterations would assign thread 1, 1 to 2 then 9 to 10; and thread 2, 3 to 4 then
11 to 12.
.PP
\FCdynamic\F(LM will create a queue of chunks at runtime, and whenever a thread becomes
available, it is assigned a chunk from the front of the queue. \FCdynamic\F(LM ensures
that none of the threads go idle if their workload is less than the others. However, the
queue creates additional overhead that may cause a loss of performance. The chunk size
defaults to 1, but you can choose a larger chunk size if you benefit from looping over
continuous iterations.
.PP
The last scheduling technique \FCguided\F(LM will shrink the chunk size at runtime so
that the initial chunks are much larger than the last. The optional chunk size parameter
defaults to 1, and it defines the minimum size of a chunk.
.PP
Below are the runtimes resulting from different scheduling techniques and various chunk
sizes:
.INCLUDE ./doc/BLERP_C_BENCHMARK.mom
.HEADING 2 "\Using Java 8 Streams"
By abusing the capability for Java 8 streams to run in parallel, we can easily optimize
this algorithm in Java.
.FLOAT FORCE
\FC
 \*[base]...
 \*[ctrl]\fBfor\fP\*[base](\*[type]int\*[base] \*[var]x\*[base] = \*[lit]0\*[base]; \*[var]x\*[base] < \*[var]newWidth\*[base]; \*[var]x\*[base]++) {
    \*[ctrl]\fBfor\fP\*[base](\*[type]int\*[base] \*[var]y\*[base] = \*[lit]0\*[base]; \*[var]y\*[base] < \*[var]newHeight\*[base]; \*[var]y\*[base]++) {
        \*[type]int \*[var]rgb\*[base] = blerpPixel(\*[var]src\*[base], \*[var]newWidth\*[base], \*[var]newHeight\*[base], \*[var]x\*[base], \*[var]y\*[base]);
        \*[var]dst\*[base].setRGB(\*[var]x\*[base], \*[var]y\*[base], \*[var]rgb\*[base]);
    }
 }
 \*[base]...\*[black]
\F(LM
.CENTER
\fR Original Java Bilinear Interpolation
.FLOAT OFF
.PP
.FLOAT FORCE
\FC
 \*[base]...
 \*[type]IntStream\*[base].range(\*[lit]0\*[base], \*[var]newWidth\*[base]).parallel().forEach(
    \*[var]x\*[base] -> \*[type]IntStream\*[base].range(\*[lit]0\*[base], \*[var]newHeight\*[base]).parallel().forEach(
        \*[var]y\*[base] -> {
            \*[type]int \*[var]rgb\*[base] = blerpPixel(\*[var]src\*[base], \*[var]newWidth\*[base], \*[var]newHeight\*[base], \*[var]x\*[base], \*[var]y\*[base]);
            \*[var]dst\*[base].setRGB(\*[var]x\*[base], \*[var]y\*[base], \*[var]rgb\*[base]);
        }
    )
 );
 ...\*[black]
\F(LM
.CENTER
\fR Parallelized using Java 8 Streams
.FLOAT OFF
.PP
